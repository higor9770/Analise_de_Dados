# -*- coding: utf-8 -*-
"""Seaborn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ltGRjFW9SdjFJsIDmxepTjEj7LP1S0wy
"""

import matplotlib.pyplot as plt
import numpy as np

"""**ScatterPlot**"""

x = [1,2,3,4,5,6,7,8]
y = [5,2,4,5,6,8,4,8]

'''
Usando o marker:
  'o' = bolinha
  '|' = |
  'v' = triangulo
  'x' = x
'''

plt.scatter(x, y, label = 'Pontos', color = 'r', marker = 'x', s = 80)
plt.legend()
plt.show()

"""Stack Plots"""

dias = [1, 2, 3, 4, 5]
dormir = [7, 8, 6, 77, 7]
comer = [2, 3, 4, 5, 3]
trabalhar = [7, 8, 7, 2, 2]
passear = [8, 5, 7, 8, 13]

plt.stackplot(dias, dormir, comer, trabalhar, passear,
              labels = ['dias', 'dormir', 'comer', 'trabalhar', 'passear'],
              colors = ['m','c','r','k','b']) # As letras representam cada cor
plt.legend(loc = 'upper left')
plt.show()

porcentagens = [70, 20, 20, 130]
cidades = ['Sao paulo', 'Recife', 'Fortaleza', 'Manaus']
colunas = ['c', 'y', 'r', 'k']


# r	Vermelho
# g	Verde
# b	Azul
# c	Ciano
# m	Mangenta
# y	Amarelo
# k	Preto
# w	Branco

plt.pie (porcentagens, labels = cidades, colors = colunas, startangle = 80, shadow = True, explode = (0, 0.80, 0, 0))
#plt.savefig('pie_chart.png', dpi = 600, size = (100, 100))
plt.show()

# startangle = girar o grafico em graus
# explode = funcao para destacar uma parte do grafico (quanto maior, mais fora do do grafico de pizza)
# shadow = sombra no grafico

plt.scatter(np.arange(50), np.random.randn(50), label='Ponto', color='k')

# Coloquem labels nos eixos, titulo e legenda

plt.show()

fig = plt.figure() # crei a figura principal e em sequencia seu subplot

ax1 = fig.add_subplot(1,2,1) # plot
ax1.plot(np.random.randn(50), color = 'green')

ax2 = fig.add_subplot(1,2,2) #scatterplot
ax2.scatter(np.random.randn(50), np.random.randn(50), color = 'purple')

# o arange cria uma sequencia de N valores (pode ser o quanto voce quiser)
#  retorna valores randomicos sem ser em sequencia

plt.show()

x = np.linspace(0, 1., 100)
fig, axes = plt.subplots(1, 2, figsize =(12,4))

axes[0].plot(x, x**2, x, x**3)
axes[0].set_title("Eicos com range padrao")

x = np.linspace(-1, 1., 100)
axes[1].plot(x, x**2, x, x**3)
axes[1].set_ylim([0, 1])  # especificar o tamanho do eixo x
axes[1].set_xlim([-1, 1])  # especificar o tamanho do eixo y
axes[1].set_title("Eixos customizados")

"""**Gráficos Diferentes**"""

# Diferentes estilos de Plots
xx = np.linspace(-0.75, 1., 100)
n = np.array([0,1,2,3,4,5])

fig, axes = plt.subplots(1, 4, figsize=(12,3))

axes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx)))
axes[0].set_title("scatter")

axes[1].step(n, n**2, lw=2)
axes[1].set_title("step")

axes[2].bar(n, n**2, align="center", width=0.5, alpha=0.5)
axes[2].set_title("bar")

axes[3].fill_between(x, x**2, x**3, color="g", alpha=0.5);
axes[3].set_title("fill_between")

"""**Histogramas**"""

# Histogramas

n = np.random.randn(100)
fig, axes = plt.subplots(1, 2, figsize=(12,4))

axes[0].hist(n)
axes[0].set_title("Histograma Padrão")
axes[0].set_xlim((min(n), max(n)))

axes[1].hist(n, cumulative = True, bins = 50)
axes[1].set_title("Histograma Cumulativo")
axes[1].set_xlim((min(n), max(n)));

"""**Mapa de Calor**"""

# Color Map (Mapa de calor)
alpha = 0.7
phi_ext = 2 * np.pi * 0.5

def ColorMap(phi_m, phi_p):
    return ( + alpha - 2 * np.cos(phi_p)*np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p))

phi_m = np.linspace(0, 2*np.pi, 100)
phi_p = np.linspace(0, 2*np.pi, 100)
X,Y = np.meshgrid(phi_p, phi_m)
Z = ColorMap(X, Y).T

fig, ax = plt.subplots()

p = ax.pcolor(X/(2*np.pi), Y/(2*np.pi), Z, vmin=abs(Z).min(), vmax=abs(Z).max()) #cmap=cm.RdBu,
cb = fig.colorbar(p, ax=ax)

"""**Gráficos 3D**"""

from mpl_toolkits.mplot3d.axes3d import Axes3D

# Para conhecer mais sobre o Mplot3d: https://matplotlib.org/2.0.2/mpl_toolkits/mplot3d/tutorial.html

fig = plt.figure(figsize=(14,6))

# Um objeto Axes3D é criado como qualquer outro eixo usando a palavra-chave: projection='3d'
ax = fig.add_subplot(1, 2, 1, projection='3d')
p = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

ax = fig.add_subplot(1, 2, 2, projection='3d')
p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.coolwarm, linewidth=0, antialiased=False)
cb = fig.colorbar(p, shrink=0.5)

# Wire frame
fig = plt.figure(figsize=(8,6))
ax = fig.add_subplot(1, 1, 1, projection = '3d')
p = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)

# Countour Plot com projeção
fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1,1,1, projection='3d')

ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
cset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=plt.cm.coolwarm)

ax.set_xlim3d(-np.pi, 2*np.pi);
ax.set_ylim3d(0, 3*np.pi);
ax.set_zlim3d(-np.pi, 2*np.pi);